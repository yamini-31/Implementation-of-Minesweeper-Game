#include<bits/stdc++.h>
using namespace std;

#define CHILD 0
#define TEENAGER 1
#define ADULT 2
#define MAXSIDE 25
#define MAXMINES 99
#define MOVESIZE 526 // (25 * 25 - 99)

int SIDE;   // side length of the board
int MINES;   // number of mines on the board

// A Utility Function to check whether given cell (row, col) is a valid cell or not
bool isValid(int row, int col)
{
    // Returns true if row number and column number are in range
    return (row >= 0 && row < SIDE && col >= 0 && col < SIDE);
}

// A Utility Function to check whether given cell (row, col) has a mine or not.
bool isMine(int row, int col, char board[][MAXSIDE])
{
    return (board[row][col] == '*');
}

// A Function to get the user's move
void makeMove(int *x, int *y)
{
    cout << "Enter your move, give row number and then column number" << endl;
    cin >> *x >> *y;
    return;
}

// A Function to print the current gameplay board
void printBoard(char myBoard[][MAXSIDE])
{
    int i, j;

    cout << " ";
    for (i = 0; i < SIDE; i++)
        cout << i;

    cout << endl;

    for (i = 0; i < SIDE; i++)
    {
        cout << i;
        for (j = 0; j < SIDE; j++)
            cout << myBoard[i][j];
        cout << endl;
    }
    return;
}

// A Function to count the number of mines in the adjacent cells
int countAdjacentMines(int row, int col, char realBoard[][MAXSIDE])
{
    int count = 0;

    // Neighbors' relative coordinates
    int dx[] = {-1, 1, 0, 0, -1, -1, 1, 1};
    int dy[] = {0, 0, -1, 1, -1, 1, -1, 1};

    for (int i = 0; i < 8; i++)
    {
        int newRow = row + dx[i];
        int newCol = col + dy[i];

        if (isValid(newRow, newCol) && isMine(newRow, newCol, realBoard))
        {
            count++;
        }
    }

    return count;
}

// A Recursive Function to play the Minesweeper Game
bool playMinesweeperUtil(char myBoard[][MAXSIDE], char realBoard[][MAXSIDE], int mines[][2], int row, int col, int *movesLeft)
{
    // Base Case of Recursion
    if (myBoard[row][col] != '-')    // already uncovered.
        return false;

    // If we open a mine, we lose.
    if (realBoard[row][col] == '*')
    {
        myBoard[row][col] = '*';

        for (int i = 0; i < MINES; i++)
            myBoard[mines[i][0]][mines[i][1]] = '*';

        printBoard(myBoard);
        cout << "Better Luck next Time!!!" << endl;
        return true;   // true here indicates that the game is lost.
    }
    else
    {
        // Calculate the number of adjacent mines and put it on the board.
        int count = countAdjacentMines(row, col, realBoard);
        (*movesLeft)--;

        myBoard[row][col] = count + '0';

        if (!count)
        {
            // Neighbors' relative coordinates
            int dx[] = {-1, 1, 0, 0, -1, -1, 1, 1};
            int dy[] = {0, 0, -1, 1, -1, 1, -1, 1};

            for (int i = 0; i < 8; i++)
            {
                int newRow = row + dx[i];
                int newCol = col + dy[i];

                if (isValid(newRow, newCol))
                {
                    playMinesweeperUtil(myBoard, realBoard, mines, newRow, newCol, movesLeft);
                }
            }
        }

        return false;
    }
}

// A Function to place the mines randomly on the board
void placeMines(int mines[][2], char realBoard[][MAXSIDE])
{
    bool mark[MAXSIDE * MAXSIDE];

    memset(mark, false, sizeof(mark));

    for (int i = 0; i < MINES;)
    {
        int random = rand() % (SIDE * SIDE);
        int x = random / SIDE;
        int y = random % SIDE;

        // Add the mine if no mine is placed at this position on the board
        if (!mark[random])
        {
            mines[i][0] = x;
            mines[i][1] = y;

            // Place the mine
            realBoard[mines[i][0]][mines[i][1]] = '*';
            mark[random] = true;
            i++;
        }
    }
}

// A Function to initialise the game
void initialise(char realBoard[][MAXSIDE], char myBoard[][MAXSIDE])
{
    // Initiate the random number generator so that the same configuration doesn't arise.
    srand(time(NULL));
    for (int i = 0; i < SIDE; i++)
    {
        for (int j = 0; j < SIDE; j++)
        {
            myBoard[i][j] = realBoard[i][j] = '-';
        }
    }
    return;
}

// A Function to cheat by revealing where the mines are placed.
void cheatMinesweeper(char realBoard[][MAXSIDE])
{
    cout << "The mines locations are" << endl;
    for (int i = 0; i < SIDE; i++) {
        for (int j = 0; j < SIDE; j++) {
            if (realBoard[i][j] == '*') {
                cout << "(" << i << ", " << j << ") ";
            }
        }
    }
    cout << endl;
    return;
}

// A function to replace the mine from (row, col). Used when our first move selects a mine.
void replaceMine(int row, int col, char board[][MAXSIDE])
{
    for (int i = 0; i < SIDE; i++)
    {
        for (int j = 0; j < SIDE; j++)
        {
            if (board[i][j] != '*')
            {
                board[i][j] = '*';
                board[row][col] = '-';
                return;
            }
        }
    }
    return;
}

// A Function to play Minesweeper game
void playMinesweeper()
{
    // Initially, the game is not over
    bool gameOver = false;

    // Actual Board and My Board
    char realBoard[MAXSIDE][MAXSIDE], myBoard[MAXSIDE][MAXSIDE];

    int movesLeft = SIDE * SIDE - MINES, x, y;
    int mines[MAXMINES][2];       // stores (x,y) coordinates of all mines.

    initialise(realBoard, myBoard);

    // Place the Mines randomly
    placeMines(mines, realBoard);

    // You are in the game until you have not opened a mine, so keep playing
    int currentMoveIndex = 0;
    while (!gameOver)
    {
        cout << "Current Status of Board :" << endl;
        printBoard(myBoard);
        makeMove(&x, &y);

        // Ensuring that the first move is not a mine.
        if (currentMoveIndex == 0)
        {
            // If the first move itself is a mine, then we remove the mine from that location
            if (isMine(x, y, realBoard))
                replaceMine(x, y, realBoard);
        }

        currentMoveIndex++;

        gameOver = playMinesweeperUtil(myBoard, realBoard, mines, x, y, &movesLeft);

        if (!gameOver && movesLeft == 0)
        {
            cout << "Hey, You won!!!" << endl;
            gameOver = true;
        }
    }
    return;
}

// A Function to choose the difficulty level of the game
void chooseDifficultyLevel()
{
    /*
    --> Child = 9 * 9 Cells and 10 Mines
    --> Teenager = 16 * 16 Cells and 40 Mines
    --> Adult = 24 * 24 Cells and 99 Mines
    */

    int level;
    cout << "Enter the Difficulty Level" << endl;
    cout << "Enter 0 for Child" << endl;
    cout << "Enter 1 for Teenager" << endl;
    cout << "Enter 2 for Adult" << endl;
    cout << "Level:";

    cin >> level;

    if (level == CHILD)
    {
        SIDE = 9;
        MINES = 10;
    }

    if (level == TEENAGER)
    {
        SIDE = 16;
        MINES = 40;
    }

    if (level == ADULT)
    {
        SIDE = 24;
        MINES = 99;
    }

    return;
}

// Driver Program to test above functions
int main()
{
    chooseDifficultyLevel();

    playMinesweeper();

    return 0;
}


